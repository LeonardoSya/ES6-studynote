
//  (5). Math.imul()  返回两个数以32位带符号整数形式相乘的结果，返回一个32位带符号整数
Math.imul(-1, 8)  // -8
// （6). Math.hypot() 返回所有参数的平方和的平方根 参数不是数值则返回NaN
Math.hypot(3, 4)  // 5  相当于勾股定理
Math.hypot(3, 4, 5)  //  7.0710678118654755

//  8. 指数运算符
console.log(2 ** 4)  //  16  注意是右结合
console.log(2 ** 3 ** 2)   //  2**(3**2) = 512
//  指数运算符与等号结合，形成一个新的赋值运算符 **=
let a = 4;
console.log(a **= 3)   //  64  相当于 a = a*a*a

//  9. BigInt
// js所有数字都保存成64位浮点数，这样数值的精度只能到53个二进制位，大于这个范围的整数js无法精确表示
// BigInt只用来表示整数，没有位数限制，任何位数的整数都可以精确表示
const an = 214234241n;  // 为了和Number类型区别,BigInt类型的数据必须加后缀n
42n === 42  //  false   
//  计算70的阶乘
let p = 1n;
for (let i = 1n; i <= 70n; i++) {
    p *= i;
}
console.log(p)  //  11978571669969891796072783721689098736458938142546425857555362864628009582789845319680000000000000000n
//  BigInt对象  用作构造函数生成BigInt类型的数值
BigInt(123)  // 123n
BigInt(false)  // 0n
BigInt(true)  // 1n

